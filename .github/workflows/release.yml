name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build_windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Install briefcase
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
      - name: Briefcase create
        run: |
          briefcase create --no-input
      - name: Briefcase package
        run: |
          briefcase package
      - name: Upload msi
        uses: actions/upload-artifact@v2
        with:
          name: msi
          path: windows/*.msi

  build_macos:
    name: Build macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Install briefcase
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
      - name: Briefcase create
        run: |
          briefcase create --no-input
      - name: Briefcase package
        run: |
          briefcase package --no-sign
      - name: Upload dmg
        uses: actions/upload-artifact@v2
        with:
          name: dmg
          path: macOS/*.dmg

  create_release:
    name: Create Release
    needs: build_windows
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false
      - name: Download windows msi
        uses: actions/download-artifact@v2
        with:
          name: msi
          path: windows
      - name: Download macos dmg
        uses: actions/download-artifact@v2
        with:
          name: dmg
          path: macOS
      - name: Get Name of MSI Artifact
        run: |
          MSI_ARTIFACT_PATHNAME=$(ls windows/*.msi | head -n 1)
          MSI_ARTIFACT_NAME=$(basename $MSI_ARTIFACT_PATHNAME)
          echo ::set-env name=MSI_ARTIFACT_NAME::${MSI_ARTIFACT_NAME}
          echo ::set-env name=MSI_ARTIFACT_PATHNAME::${MSI_ARTIFACT_PATHNAME}
      - name: Get Name of DMG Artifact
        run: |
          DMG_ARTIFACT_PATHNAME=$(ls macOS/*.dmg | head -n 1)
          DMG_ARTIFACT_NAME=$(basename $DMG_ARTIFACT_PATHNAME)
          echo ::set-env name=DMG_ARTIFACT_NAME::${DMG_ARTIFACT_NAME}
          echo ::set-env name=DMG_ARTIFACT_PATHNAME::${DMG_ARTIFACT_PATHNAME}
      - name: Upload MSI Asset
        id: upload-msi-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.MSI_ARTIFACT_PATHNAME }}
          asset_name: ${{ env.MSI_ARTIFACT_NAME }}
          asset_content_type: application/x-ole-storage
      - name: Upload DMG Asset
        id: upload-dmg-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.DMG_ARTIFACT_PATHNAME }}
          asset_name: ${{ env.DMG_ARTIFACT_NAME }}
          asset_content_type: application/x-ole-storage

